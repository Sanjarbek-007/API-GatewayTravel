// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: content.proto

package genproto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	ContentService_CrateStory_FullMethodName              = "/protos.ContentService/CrateStory"
	ContentService_UpdateStory_FullMethodName             = "/protos.ContentService/UpdateStory"
	ContentService_DeleteStory_FullMethodName             = "/protos.ContentService/DeleteStory"
	ContentService_GetAllStories_FullMethodName           = "/protos.ContentService/GetAllStories"
	ContentService_StoryFullInfo_FullMethodName           = "/protos.ContentService/StoryFullInfo"
	ContentService_CommentStory_FullMethodName            = "/protos.ContentService/CommentStory"
	ContentService_GetAllComments_FullMethodName          = "/protos.ContentService/GetAllComments"
	ContentService_CreateLike_FullMethodName              = "/protos.ContentService/CreateLike"
	ContentService_CreateItineraries_FullMethodName       = "/protos.ContentService/CreateItineraries"
	ContentService_UpdateItineraries_FullMethodName       = "/protos.ContentService/UpdateItineraries"
	ContentService_DeleteItineraries_FullMethodName       = "/protos.ContentService/DeleteItineraries"
	ContentService_GetAllItineraries_FullMethodName       = "/protos.ContentService/GetAllItineraries"
	ContentService_ItinerariesFullInfo_FullMethodName     = "/protos.ContentService/ItinerariesFullInfo"
	ContentService_CommentItineraries_FullMethodName      = "/protos.ContentService/CommentItineraries"
	ContentService_GetDestinations_FullMethodName         = "/protos.ContentService/GetDestinations"
	ContentService_GetDestinationInfo_FullMethodName      = "/protos.ContentService/GetDestinationInfo"
	ContentService_SentMessage_FullMethodName             = "/protos.ContentService/SentMessage"
	ContentService_GetAllMessages_FullMethodName          = "/protos.ContentService/GetAllMessages"
	ContentService_CreateTravelTip_FullMethodName         = "/protos.ContentService/CreateTravelTip"
	ContentService_GetTravelTips_FullMethodName           = "/protos.ContentService/GetTravelTips"
	ContentService_UserStatistics_FullMethodName          = "/protos.ContentService/UserStatistics"
	ContentService_GetTrendingDestinations_FullMethodName = "/protos.ContentService/GetTrendingDestinations"
)

// ContentServiceClient is the client API for ContentService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContentServiceClient interface {
	CrateStory(ctx context.Context, in *CrateStoryRequest, opts ...grpc.CallOption) (*CrateStoryResponse, error)
	UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error)
	DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*DeleteStoryResponse, error)
	GetAllStories(ctx context.Context, in *GetAllStoriesRequest, opts ...grpc.CallOption) (*GetAllStoriesResponse, error)
	StoryFullInfo(ctx context.Context, in *StoryFullInfoRequest, opts ...grpc.CallOption) (*StoryFullInfoResponse, error)
	CommentStory(ctx context.Context, in *CommentStoryRequest, opts ...grpc.CallOption) (*CommentStoryResponse, error)
	GetAllComments(ctx context.Context, in *GetAllCommentRequest, opts ...grpc.CallOption) (*GetAllCommentResponse, error)
	CreateLike(ctx context.Context, in *CreateLikeRequest, opts ...grpc.CallOption) (*CreateLikeResponse, error)
	CreateItineraries(ctx context.Context, in *CreateItinerariesRequest, opts ...grpc.CallOption) (*CreateItinerariesResponse, error)
	UpdateItineraries(ctx context.Context, in *UpdateItinerariesRequest, opts ...grpc.CallOption) (*UpdateItinerariesResponse, error)
	DeleteItineraries(ctx context.Context, in *DeleteItinerariesRequest, opts ...grpc.CallOption) (*DeleteItinerariesResponse, error)
	GetAllItineraries(ctx context.Context, in *GetAllItinerariesRequest, opts ...grpc.CallOption) (*GetAllItinerariesResponse, error)
	ItinerariesFullInfo(ctx context.Context, in *ItinerariesFullInfoRequest, opts ...grpc.CallOption) (*ItinerariesFullInfoResponse, error)
	CommentItineraries(ctx context.Context, in *CommentItinerariesRequest, opts ...grpc.CallOption) (*CommentItinerariesResponse, error)
	GetDestinations(ctx context.Context, in *GetDestinationsRequest, opts ...grpc.CallOption) (*GetDestinationsResponse, error)
	GetDestinationInfo(ctx context.Context, in *GetDestinationInfoRequest, opts ...grpc.CallOption) (*GetDestinationInfoResponse, error)
	SentMessage(ctx context.Context, in *SentMessageRequest, opts ...grpc.CallOption) (*SentMessageResponse, error)
	GetAllMessages(ctx context.Context, in *GetAllMessagesRequest, opts ...grpc.CallOption) (*GetAllMessagesResponse, error)
	CreateTravelTip(ctx context.Context, in *CreateTravelTipRequest, opts ...grpc.CallOption) (*CreateTravelTipResponse, error)
	GetTravelTips(ctx context.Context, in *GetTravelTipsRequest, opts ...grpc.CallOption) (*GetTravelTipsResponse, error)
	UserStatistics(ctx context.Context, in *UserStatisticsRequest, opts ...grpc.CallOption) (*UserStatisticsResponse, error)
	GetTrendingDestinations(ctx context.Context, in *GetTravelTipsRequest, opts ...grpc.CallOption) (*GetTravelTipsResponse, error)
}

type contentServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContentServiceClient(cc grpc.ClientConnInterface) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) CrateStory(ctx context.Context, in *CrateStoryRequest, opts ...grpc.CallOption) (*CrateStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CrateStoryResponse)
	err := c.cc.Invoke(ctx, ContentService_CrateStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdateStory(ctx context.Context, in *UpdateStoryRequest, opts ...grpc.CallOption) (*UpdateStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateStoryResponse)
	err := c.cc.Invoke(ctx, ContentService_UpdateStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteStory(ctx context.Context, in *DeleteStoryRequest, opts ...grpc.CallOption) (*DeleteStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteStoryResponse)
	err := c.cc.Invoke(ctx, ContentService_DeleteStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetAllStories(ctx context.Context, in *GetAllStoriesRequest, opts ...grpc.CallOption) (*GetAllStoriesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllStoriesResponse)
	err := c.cc.Invoke(ctx, ContentService_GetAllStories_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) StoryFullInfo(ctx context.Context, in *StoryFullInfoRequest, opts ...grpc.CallOption) (*StoryFullInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StoryFullInfoResponse)
	err := c.cc.Invoke(ctx, ContentService_StoryFullInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CommentStory(ctx context.Context, in *CommentStoryRequest, opts ...grpc.CallOption) (*CommentStoryResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentStoryResponse)
	err := c.cc.Invoke(ctx, ContentService_CommentStory_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetAllComments(ctx context.Context, in *GetAllCommentRequest, opts ...grpc.CallOption) (*GetAllCommentResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllCommentResponse)
	err := c.cc.Invoke(ctx, ContentService_GetAllComments_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateLike(ctx context.Context, in *CreateLikeRequest, opts ...grpc.CallOption) (*CreateLikeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateLikeResponse)
	err := c.cc.Invoke(ctx, ContentService_CreateLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateItineraries(ctx context.Context, in *CreateItinerariesRequest, opts ...grpc.CallOption) (*CreateItinerariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItinerariesResponse)
	err := c.cc.Invoke(ctx, ContentService_CreateItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UpdateItineraries(ctx context.Context, in *UpdateItinerariesRequest, opts ...grpc.CallOption) (*UpdateItinerariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateItinerariesResponse)
	err := c.cc.Invoke(ctx, ContentService_UpdateItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) DeleteItineraries(ctx context.Context, in *DeleteItinerariesRequest, opts ...grpc.CallOption) (*DeleteItinerariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteItinerariesResponse)
	err := c.cc.Invoke(ctx, ContentService_DeleteItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetAllItineraries(ctx context.Context, in *GetAllItinerariesRequest, opts ...grpc.CallOption) (*GetAllItinerariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllItinerariesResponse)
	err := c.cc.Invoke(ctx, ContentService_GetAllItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) ItinerariesFullInfo(ctx context.Context, in *ItinerariesFullInfoRequest, opts ...grpc.CallOption) (*ItinerariesFullInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ItinerariesFullInfoResponse)
	err := c.cc.Invoke(ctx, ContentService_ItinerariesFullInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CommentItineraries(ctx context.Context, in *CommentItinerariesRequest, opts ...grpc.CallOption) (*CommentItinerariesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CommentItinerariesResponse)
	err := c.cc.Invoke(ctx, ContentService_CommentItineraries_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetDestinations(ctx context.Context, in *GetDestinationsRequest, opts ...grpc.CallOption) (*GetDestinationsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDestinationsResponse)
	err := c.cc.Invoke(ctx, ContentService_GetDestinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetDestinationInfo(ctx context.Context, in *GetDestinationInfoRequest, opts ...grpc.CallOption) (*GetDestinationInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDestinationInfoResponse)
	err := c.cc.Invoke(ctx, ContentService_GetDestinationInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) SentMessage(ctx context.Context, in *SentMessageRequest, opts ...grpc.CallOption) (*SentMessageResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SentMessageResponse)
	err := c.cc.Invoke(ctx, ContentService_SentMessage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetAllMessages(ctx context.Context, in *GetAllMessagesRequest, opts ...grpc.CallOption) (*GetAllMessagesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllMessagesResponse)
	err := c.cc.Invoke(ctx, ContentService_GetAllMessages_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) CreateTravelTip(ctx context.Context, in *CreateTravelTipRequest, opts ...grpc.CallOption) (*CreateTravelTipResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateTravelTipResponse)
	err := c.cc.Invoke(ctx, ContentService_CreateTravelTip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTravelTips(ctx context.Context, in *GetTravelTipsRequest, opts ...grpc.CallOption) (*GetTravelTipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTravelTipsResponse)
	err := c.cc.Invoke(ctx, ContentService_GetTravelTips_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) UserStatistics(ctx context.Context, in *UserStatisticsRequest, opts ...grpc.CallOption) (*UserStatisticsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserStatisticsResponse)
	err := c.cc.Invoke(ctx, ContentService_UserStatistics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) GetTrendingDestinations(ctx context.Context, in *GetTravelTipsRequest, opts ...grpc.CallOption) (*GetTravelTipsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTravelTipsResponse)
	err := c.cc.Invoke(ctx, ContentService_GetTrendingDestinations_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContentServiceServer is the server API for ContentService service.
// All implementations must embed UnimplementedContentServiceServer
// for forward compatibility
type ContentServiceServer interface {
	CrateStory(context.Context, *CrateStoryRequest) (*CrateStoryResponse, error)
	UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error)
	DeleteStory(context.Context, *DeleteStoryRequest) (*DeleteStoryResponse, error)
	GetAllStories(context.Context, *GetAllStoriesRequest) (*GetAllStoriesResponse, error)
	StoryFullInfo(context.Context, *StoryFullInfoRequest) (*StoryFullInfoResponse, error)
	CommentStory(context.Context, *CommentStoryRequest) (*CommentStoryResponse, error)
	GetAllComments(context.Context, *GetAllCommentRequest) (*GetAllCommentResponse, error)
	CreateLike(context.Context, *CreateLikeRequest) (*CreateLikeResponse, error)
	CreateItineraries(context.Context, *CreateItinerariesRequest) (*CreateItinerariesResponse, error)
	UpdateItineraries(context.Context, *UpdateItinerariesRequest) (*UpdateItinerariesResponse, error)
	DeleteItineraries(context.Context, *DeleteItinerariesRequest) (*DeleteItinerariesResponse, error)
	GetAllItineraries(context.Context, *GetAllItinerariesRequest) (*GetAllItinerariesResponse, error)
	ItinerariesFullInfo(context.Context, *ItinerariesFullInfoRequest) (*ItinerariesFullInfoResponse, error)
	CommentItineraries(context.Context, *CommentItinerariesRequest) (*CommentItinerariesResponse, error)
	GetDestinations(context.Context, *GetDestinationsRequest) (*GetDestinationsResponse, error)
	GetDestinationInfo(context.Context, *GetDestinationInfoRequest) (*GetDestinationInfoResponse, error)
	SentMessage(context.Context, *SentMessageRequest) (*SentMessageResponse, error)
	GetAllMessages(context.Context, *GetAllMessagesRequest) (*GetAllMessagesResponse, error)
	CreateTravelTip(context.Context, *CreateTravelTipRequest) (*CreateTravelTipResponse, error)
	GetTravelTips(context.Context, *GetTravelTipsRequest) (*GetTravelTipsResponse, error)
	UserStatistics(context.Context, *UserStatisticsRequest) (*UserStatisticsResponse, error)
	GetTrendingDestinations(context.Context, *GetTravelTipsRequest) (*GetTravelTipsResponse, error)
	mustEmbedUnimplementedContentServiceServer()
}

// UnimplementedContentServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContentServiceServer struct {
}

func (UnimplementedContentServiceServer) CrateStory(context.Context, *CrateStoryRequest) (*CrateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CrateStory not implemented")
}
func (UnimplementedContentServiceServer) UpdateStory(context.Context, *UpdateStoryRequest) (*UpdateStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateStory not implemented")
}
func (UnimplementedContentServiceServer) DeleteStory(context.Context, *DeleteStoryRequest) (*DeleteStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStory not implemented")
}
func (UnimplementedContentServiceServer) GetAllStories(context.Context, *GetAllStoriesRequest) (*GetAllStoriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllStories not implemented")
}
func (UnimplementedContentServiceServer) StoryFullInfo(context.Context, *StoryFullInfoRequest) (*StoryFullInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoryFullInfo not implemented")
}
func (UnimplementedContentServiceServer) CommentStory(context.Context, *CommentStoryRequest) (*CommentStoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentStory not implemented")
}
func (UnimplementedContentServiceServer) GetAllComments(context.Context, *GetAllCommentRequest) (*GetAllCommentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllComments not implemented")
}
func (UnimplementedContentServiceServer) CreateLike(context.Context, *CreateLikeRequest) (*CreateLikeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLike not implemented")
}
func (UnimplementedContentServiceServer) CreateItineraries(context.Context, *CreateItinerariesRequest) (*CreateItinerariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItineraries not implemented")
}
func (UnimplementedContentServiceServer) UpdateItineraries(context.Context, *UpdateItinerariesRequest) (*UpdateItinerariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItineraries not implemented")
}
func (UnimplementedContentServiceServer) DeleteItineraries(context.Context, *DeleteItinerariesRequest) (*DeleteItinerariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItineraries not implemented")
}
func (UnimplementedContentServiceServer) GetAllItineraries(context.Context, *GetAllItinerariesRequest) (*GetAllItinerariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllItineraries not implemented")
}
func (UnimplementedContentServiceServer) ItinerariesFullInfo(context.Context, *ItinerariesFullInfoRequest) (*ItinerariesFullInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ItinerariesFullInfo not implemented")
}
func (UnimplementedContentServiceServer) CommentItineraries(context.Context, *CommentItinerariesRequest) (*CommentItinerariesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CommentItineraries not implemented")
}
func (UnimplementedContentServiceServer) GetDestinations(context.Context, *GetDestinationsRequest) (*GetDestinationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestinations not implemented")
}
func (UnimplementedContentServiceServer) GetDestinationInfo(context.Context, *GetDestinationInfoRequest) (*GetDestinationInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDestinationInfo not implemented")
}
func (UnimplementedContentServiceServer) SentMessage(context.Context, *SentMessageRequest) (*SentMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SentMessage not implemented")
}
func (UnimplementedContentServiceServer) GetAllMessages(context.Context, *GetAllMessagesRequest) (*GetAllMessagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMessages not implemented")
}
func (UnimplementedContentServiceServer) CreateTravelTip(context.Context, *CreateTravelTipRequest) (*CreateTravelTipResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTravelTip not implemented")
}
func (UnimplementedContentServiceServer) GetTravelTips(context.Context, *GetTravelTipsRequest) (*GetTravelTipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTravelTips not implemented")
}
func (UnimplementedContentServiceServer) UserStatistics(context.Context, *UserStatisticsRequest) (*UserStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserStatistics not implemented")
}
func (UnimplementedContentServiceServer) GetTrendingDestinations(context.Context, *GetTravelTipsRequest) (*GetTravelTipsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTrendingDestinations not implemented")
}
func (UnimplementedContentServiceServer) mustEmbedUnimplementedContentServiceServer() {}

// UnsafeContentServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContentServiceServer will
// result in compilation errors.
type UnsafeContentServiceServer interface {
	mustEmbedUnimplementedContentServiceServer()
}

func RegisterContentServiceServer(s grpc.ServiceRegistrar, srv ContentServiceServer) {
	s.RegisterService(&ContentService_ServiceDesc, srv)
}

func _ContentService_CrateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CrateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CrateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CrateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CrateStory(ctx, req.(*CrateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdateStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdateStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UpdateStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdateStory(ctx, req.(*UpdateStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteStory(ctx, req.(*DeleteStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetAllStories_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllStoriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetAllStories(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetAllStories_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetAllStories(ctx, req.(*GetAllStoriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_StoryFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StoryFullInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).StoryFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_StoryFullInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).StoryFullInfo(ctx, req.(*StoryFullInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CommentStory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentStoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CommentStory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CommentStory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CommentStory(ctx, req.(*CommentStoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetAllComments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllCommentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetAllComments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetAllComments_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetAllComments(ctx, req.(*GetAllCommentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLikeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreateLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateLike(ctx, req.(*CreateLikeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItinerariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreateItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateItineraries(ctx, req.(*CreateItinerariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UpdateItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItinerariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UpdateItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UpdateItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UpdateItineraries(ctx, req.(*UpdateItinerariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_DeleteItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItinerariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).DeleteItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_DeleteItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).DeleteItineraries(ctx, req.(*DeleteItinerariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetAllItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllItinerariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetAllItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetAllItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetAllItineraries(ctx, req.(*GetAllItinerariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_ItinerariesFullInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItinerariesFullInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).ItinerariesFullInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_ItinerariesFullInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).ItinerariesFullInfo(ctx, req.(*ItinerariesFullInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CommentItineraries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommentItinerariesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CommentItineraries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CommentItineraries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CommentItineraries(ctx, req.(*CommentItinerariesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDestinationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetDestinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetDestinations(ctx, req.(*GetDestinationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetDestinationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDestinationInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetDestinationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetDestinationInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetDestinationInfo(ctx, req.(*GetDestinationInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_SentMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SentMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).SentMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_SentMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).SentMessage(ctx, req.(*SentMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetAllMessages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllMessagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetAllMessages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetAllMessages_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetAllMessages(ctx, req.(*GetAllMessagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_CreateTravelTip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTravelTipRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).CreateTravelTip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_CreateTravelTip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).CreateTravelTip(ctx, req.(*CreateTravelTipRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTravelTips_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTravelTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTravelTips(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTravelTips_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTravelTips(ctx, req.(*GetTravelTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_UserStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).UserStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_UserStatistics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).UserStatistics(ctx, req.(*UserStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_GetTrendingDestinations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTravelTipsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).GetTrendingDestinations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContentService_GetTrendingDestinations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).GetTrendingDestinations(ctx, req.(*GetTravelTipsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContentService_ServiceDesc is the grpc.ServiceDesc for ContentService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContentService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CrateStory",
			Handler:    _ContentService_CrateStory_Handler,
		},
		{
			MethodName: "UpdateStory",
			Handler:    _ContentService_UpdateStory_Handler,
		},
		{
			MethodName: "DeleteStory",
			Handler:    _ContentService_DeleteStory_Handler,
		},
		{
			MethodName: "GetAllStories",
			Handler:    _ContentService_GetAllStories_Handler,
		},
		{
			MethodName: "StoryFullInfo",
			Handler:    _ContentService_StoryFullInfo_Handler,
		},
		{
			MethodName: "CommentStory",
			Handler:    _ContentService_CommentStory_Handler,
		},
		{
			MethodName: "GetAllComments",
			Handler:    _ContentService_GetAllComments_Handler,
		},
		{
			MethodName: "CreateLike",
			Handler:    _ContentService_CreateLike_Handler,
		},
		{
			MethodName: "CreateItineraries",
			Handler:    _ContentService_CreateItineraries_Handler,
		},
		{
			MethodName: "UpdateItineraries",
			Handler:    _ContentService_UpdateItineraries_Handler,
		},
		{
			MethodName: "DeleteItineraries",
			Handler:    _ContentService_DeleteItineraries_Handler,
		},
		{
			MethodName: "GetAllItineraries",
			Handler:    _ContentService_GetAllItineraries_Handler,
		},
		{
			MethodName: "ItinerariesFullInfo",
			Handler:    _ContentService_ItinerariesFullInfo_Handler,
		},
		{
			MethodName: "CommentItineraries",
			Handler:    _ContentService_CommentItineraries_Handler,
		},
		{
			MethodName: "GetDestinations",
			Handler:    _ContentService_GetDestinations_Handler,
		},
		{
			MethodName: "GetDestinationInfo",
			Handler:    _ContentService_GetDestinationInfo_Handler,
		},
		{
			MethodName: "SentMessage",
			Handler:    _ContentService_SentMessage_Handler,
		},
		{
			MethodName: "GetAllMessages",
			Handler:    _ContentService_GetAllMessages_Handler,
		},
		{
			MethodName: "CreateTravelTip",
			Handler:    _ContentService_CreateTravelTip_Handler,
		},
		{
			MethodName: "GetTravelTips",
			Handler:    _ContentService_GetTravelTips_Handler,
		},
		{
			MethodName: "UserStatistics",
			Handler:    _ContentService_UserStatistics_Handler,
		},
		{
			MethodName: "GetTrendingDestinations",
			Handler:    _ContentService_GetTrendingDestinations_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "content.proto",
}
